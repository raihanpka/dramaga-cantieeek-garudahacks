import { b as ScorerOptions, S as ScoringInput, c as ScoringInputWithExtractStepResult } from '../types-UKgRwZf8.cjs';
export { A as AnalyzeStepFn, E as ExtractionStepFn, R as ReasonStepFn, n as ScoreRowData, k as ScoringAnalyzeStepResult, f as ScoringEntityType, h as ScoringExtractStepResult, l as ScoringInputWithExtractStepResultAndAnalyzeStepResult, m as ScoringInputWithExtractStepResultAndScoreAndReason, g as ScoringPrompts, d as ScoringSamplingConfig, e as ScoringSource, j as scoreResultSchema, s as scoringExtractStepResultSchema, i as scoringValueSchema } from '../types-UKgRwZf8.cjs';
import { a5 as MastraScorer, a6 as MastraLanguageModel } from '../base-_bo5v6O4.cjs';
export { a7 as MastraScorerEntry, a8 as MastraScorers } from '../base-_bo5v6O4.cjs';
import { z } from 'zod';
import 'ai';
import '../base.cjs';
import '@opentelemetry/api';
import '../logger-B8XXh6ya.cjs';
import '../error/index.cjs';
import 'stream';
import '../runtime-context/index.cjs';
import '../telemetry-BEnuXKvd.cjs';
import '@opentelemetry/sdk-trace-base';
import 'json-schema';
import 'stream/web';
import 'sift';
import 'xstate';
import 'node:events';
import '../vector/index.cjs';
import '../vector/filter/index.cjs';
import '../tts/index.cjs';
import 'ai/test';
import 'node:http';
import 'hono';
import 'events';
import 'node:stream/web';
import '../workflows/constants.cjs';
import '@ai-sdk/provider';
import '../deployer/index.cjs';
import '../bundler/index.cjs';
import 'hono/cors';
import 'hono-openapi';

declare function createScorer(opts: ScorerOptions): MastraScorer;

type LLMJudge = {
    model: MastraLanguageModel;
    instructions: string;
};
type LLMScorerOptions<TExtractOutput extends Record<string, any> = any, TScoreOutput = any> = {
    name: string;
    description: string;
    judge: LLMJudge;
    extract?: {
        description: string;
        judge?: LLMJudge;
        outputSchema: z.ZodType<TExtractOutput>;
        createPrompt: ({ run }: {
            run: ScoringInput;
        }) => string;
    };
    analyze: {
        description: string;
        judge?: LLMJudge;
        outputSchema: z.ZodType<TScoreOutput>;
        createPrompt: ({ run }: {
            run: ScoringInput & {
                extractStepResult: TExtractOutput;
            };
        }) => string;
    };
    reason?: {
        description: string;
        judge?: LLMJudge;
        createPrompt: ({ run, }: {
            run: ScoringInputWithExtractStepResult & {
                analyzeStepResult: TScoreOutput;
                score: number;
            };
        }) => string;
    };
    calculateScore: ({ run }: {
        run: ScoringInputWithExtractStepResult & {
            analyzeStepResult: TScoreOutput;
        };
    }) => number;
};
declare function createLLMScorer<TExtractOutput extends Record<string, any> = any, TScoreOutput = any>(opts: LLMScorerOptions<TExtractOutput, TScoreOutput>): MastraScorer;

export { type LLMScorerOptions, MastraScorer, ScorerOptions, ScoringInput, ScoringInputWithExtractStepResult, createLLMScorer, createScorer };
