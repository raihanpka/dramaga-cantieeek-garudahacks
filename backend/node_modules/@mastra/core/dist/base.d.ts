import * as _opentelemetry_api from '@opentelemetry/api';
import { R as RegisteredLogger, I as IMastraLogger } from './logger-Bpa2oLL4.js';
import { RuntimeContext } from './runtime-context/index.js';
import { T as Telemetry } from './telemetry-BEnuXKvd.js';
import './error/index.js';
import 'stream';
import '@opentelemetry/sdk-trace-base';

type DynamicArgument<T> = T | (({ runtimeContext }: {
    runtimeContext: RuntimeContext;
}) => Promise<T> | T);

declare class MastraBase {
    component: RegisteredLogger;
    protected logger: IMastraLogger;
    name?: string;
    telemetry?: Telemetry;
    constructor({ component, name }: {
        component?: RegisteredLogger;
        name?: string;
    });
    /**
     * Set the logger for the agent
     * @param logger
     */
    __setLogger(logger: IMastraLogger): void;
    /**
     * Set the telemetry for the
     * @param telemetry
     */
    __setTelemetry(telemetry: Telemetry): void;
    /**
     * Get the telemetry on the vector
     * @returns telemetry
     */
    __getTelemetry(): Telemetry | undefined;
    get experimental_telemetry(): {
        tracer: _opentelemetry_api.Tracer;
        isEnabled: boolean;
    } | undefined;
}

export { type DynamicArgument, MastraBase };
